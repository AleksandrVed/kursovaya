from random import randint
import time
import math

print("1 - Bubble", "2 - Shell", "3 - piramidalnaya", "4 - introsort", sep='\n')
variant = int(input())
if variant == 1:
    for N in range (100, 3001, 100):
        a = []
        for i in range(N):
            a.append(randint(1, 99))
        def bubble(array):
            start = time.time()
            for i in range(N-1):
                for j in range(N-i-1):
                    if array[j] > array[j+1]:
                        array[j], array[j+1] = array[j+1], array[j]
            end = time.time() - start
            f = open('file.txt', 'a+')
            f.write(str(N))
            f.write('  ')
            f.write(str(end))
            f.write('\n')
            f.close()
            return N, end
        print(bubble(a))
elif variant == 2:
    for N in range (1000, 100001, 1000):
        a = []
        for i in range(N):
            a.append(randint(1, 99))
        print(a)
        def shell(seq):
            start = time.time()
            inc = len(seq) // 2
            while inc:
                for i, el in enumerate(seq):
                    while i >= inc and seq[i - inc] > el:
                        seq[i] = seq[i - inc]
                        i -= inc
                    seq[i] = el
                inc = 1 if inc == 2 else int(inc * 5.0 / 11)
            end = time.time() - start
            f = open('file.txt', 'a+')
            f.write(str(N))
            f.write('  ')
            f.write(str(end))
            f.write('\n')
            f.close()
            return N, end
        print(shell(a))
elif variant == 3:
    for N in range (1000, 100001, 1000):
        a = []
        for i in range(N):
            a.append(randint(1, 99))
        def heapify(array, heap_size, root_index):
            largest = root_index
            left_child = (2 * root_index) + 1
            right_child = (2 * root_index) + 2
            if left_child < heap_size and array[left_child] > array[largest]:
                largest = left_child
            if right_child < heap_size and array[right_child] > array[largest]:
                largest = right_child
            if largest != root_index:
                array[root_index], array[largest] = array[largest], array[root_index]
                heapify(array, heap_size, largest)
        def heap_sort(array):
            startTime = time.time()
            n = len(array)
            for i in range(n, -1, -1):
                heapify(array, n, i)
            for i in range(n - 1, 0, -1):
                array[i], array[0] = array[0], array[i]
                heapify(array, i, 0)
            endTime = time.time() - startTime
            f = open('file.txt', 'a+')
            f.write(str(N))
            f.write('  ')
            f.write(str(end))
            f.write('\n')
            f.close()
            return N, endTime
        print(heap_sort(a))
elif variant == 4:
    for N in range (1000, 100001, 1000):
        a = []
        for i in range(N):
            a.append(randint(1, 99))
        def introSort(a, d, start, end):
            n = end - start
            if n <= 1:
                return
            elif d == 0:
                introHS(a, start, end)
            else:
                p = partition(a, start, end)
                introSort(a, d-1, start, p)
                introSort(a, d-1, p+1, end)
        def introHS (a, start, end):
            b = a[start:end]
            heapSort(b)
            for i in range(0,len(b)):
                a[start+i] = b[i]
        def floor(n):
            return int(n//1)
        def heapSort (a):
            END = len(a)
            for k in range (floor(END/2) - 1, -1, -1):
                heapify(a, END, k)
            for k in range(END, 1, -1):
                swap(a, 0, k-1)
                heapify(a, k-1, 0)
        def partition(a, start, end):
            x = a[end-1]
            i = start-1
            for j in range(start, end-1):
                if a[j] <= x:
                    i=i+1
                    swap(a, i, j)
            swap(a, i+1, end-1)
            return i+1
        def swap(a, i, j):
            tmp = a[i]
            a[i] = a[j]
            a[j] = tmp
        def heapify(a,iEnd,iRoot):
            iL = 2*iRoot + 1
            iR = 2*iRoot + 2
            if iR < iEnd:
                if (a[iRoot] >= a[iL] and a[iRoot] >= a[iR]):
                    return
                else:
                    if(a[iL] > a[iR]):
                        j = iL
                    else:
                        j = iR
                    swap(a, iRoot, j)
                    heapify(a, iEnd, j)
            elif iL < iEnd:
                if (a[iRoot] >= a[iL]):
                    return
                else:
                    swap(a, iRoot, iL)
                    heapify(a,iEnd,iL)
            else:
                return
        def startintro(alist):
            N = len(alist)
            startTime = time.time()
            a = alist
            d = 2*(math.log2(N))
            start = 1
            end = len(alist)
            introSort(a, d, start, end)
            endTime = time.time() - startTime
            f = open('file.txt', 'a+')
            f.write(str(N))
            f.write('  ')
            f.write(str(end))
            f.write('\n')
            f.close()
            return N, endTime
        print(startintro(a))
