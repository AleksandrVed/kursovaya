from random import randint
import time
def heapify(array, heap_size, root_index):
    # Индекс наибольшего элемента считается корневым индексом
    largest = root_index
    left_child = (2 * root_index) + 1
    right_child = (2 * root_index) + 2
    
    """
    Если левый потомок корня — это допустимый индекс, а элемент больше,
    чем текущий наибольший, то мы обновляем наибольший элемент
    """
    if left_child < heap_size and array[left_child] > array[largest]:
        largest = left_child

    # То же самое и для правого потомка корня
    if right_child < heap_size and array[right_child] > array[largest]:
        largest = right_child

    # Если наибольший элемент уже не корневой, они меняются местами
    if largest != root_index:
        array[root_index], array[largest] = array[largest], array[root_index]
        heapify(array, heap_size, largest)

def heap_sort(array):
    startTime = time.time()
    n = len(array)
    # Создаём Max Heap из списка
    # 2-й аргумент означает остановку алгоритма перед элементом -1, то есть
    # перед первым элементом списка
    # 3-й аргумент означает повторный проход по списку в обратном направлении,
    # уменьшая счётчик i на 1
    for i in range(n, -1, -1):
        heapify(array, n, i)

    # Перемещаем корень Max Heap в самый конец списка
    for i in range(n - 1, 0, -1):
        array[i], array[0] = array[0], array[i]
        heapify(array, i, 0)
    endTime = time.time() - startTime
    return endTime
# Проверяем, что всё работает
N = 100000
alist = []
for i in range(N):
    alist.append(randint(1, 999))
#print(alist)
print(heap_sort(alist))
